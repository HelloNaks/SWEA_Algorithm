import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Solution {

	static int N;
	static int[] dr = { 0, 1, 0, -1 };
	static int[] dc = { 1, 0, -1, 0 };
	static int[][] map;
	static boolean[][] visited;
	static int flag;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		for (int t = 1; t <= 10; t++) {
			flag=0;
			N = Integer.parseInt(br.readLine());
			map = new int[16][16];
			visited = new boolean[16][16];
			for (int i = 0; i < 16; i++) {
				String s = br.readLine();
				char[] ch = new char[16];
				ch = s.toCharArray();
				for (int j = 0; j < 16; j++) {
					map[i][j] = (int) ch[j] - '0';
				}
			}

			for (int i = 0; i < 16; i++) {
				for (int j = 0; j < 16; j++) {
					if (map[i][j] == 2) {
						dfs(i,j);
						if (flag==1) {
							System.out.println("#"+t+" 1");
						}else {
							System.out.println("#"+t+" 0");
						}
					}
				}
			}
		}
	}

	private static void dfs(int i, int j) {
		visited[i][j]=true;
		for (int d = 0; d < 4; d++) {
			int nr=i+dr[d];
			int nc=j+dc[d];
			if(map[nr][nc]==3) {
				flag=1;
				return;
			}else if(map[nr][nc]==0 && !visited[nr][nc]) {
				dfs(nr,nc);
			}
		}
		
	}
}
